trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  group: DatabaseConfig

steps:
# Install NuGet (Ensures you have the latest version)
- task: NuGetToolInstaller@1

# Restore NuGet Packages
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Build the Project
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    # msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishUrl=$(build.artifactStagingDirectory)/WebApp /p:SkipInvalidConfigurations=true /p:PackageAsSingleFile=false /p:Configuration=$(buildConfiguration)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- script: curl https://api.ipify.org
  displayName: 'Get Agent IP Address'



# Apply Migrations Step
# - script: |
#     echo "Applying database migrations..."
#     dotnet tool restore
#     dotnet ef database update --project src/MyApi/MyApi.csproj
#   displayName: 'Apply Migrations'
#   env:
#     ConnectionStrings__Default: $(ConnectionStrings__Default)

# Run Integration Tests
# - script: |
#     echo "Running integration tests"
#     dotnet test --filter TestCategory=Integration
#   env:
#     ConnectionStrings__Default: $(ConnectionStrings__Default)
- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
# Step 3: Publish the project output
- task: DotNetCoreCLI@2
  displayName: 'Publish DevOpsApi.core.api'
  inputs:
    command: 'publish'
    publishWebProjects: false
    # projects: '$(projectPath)'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(outputDir)'

    # Step 4: Archive the output as a zip package (optional)
- task: ArchiveFiles@2
  displayName: 'Archive DevOpsApi.core.api as zip'
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/DevOpsApi.core.api.zip'
    replaceExistingArchive: true

    # Step 5: Publish the package as an artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'DevOpsApi.core.api'
    publishLocation: 'Container'

# Deploy to Azure App Service
- task: AzureWebApp@1
  displayName: 'Deploy to Azure App Service'
  inputs:
    azureSubscription: 'tempusServiceConnection'
    appType: 'webApp'
    appName: 'jgsaldana4'
    # package: '$(Build.ArtifactStagingDirectory)\WebApp.zip'
    package: '$(build.artifactStagingDirectory)/WebApp'
